{"version":3,"sources":["images/test.png","article/article","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Layout","Content","App","useState","setStr","setArticles","listData","i","push","href","title","avatar","description","content","IconText","icon","text","React","createElement","getArtifactRequest","Request","require","method","useEffect","fetch","then","response","JSON","parse","className","style","height","textAlign","type","strokeColor","percent","status","onChange","event","target","value","placeholder","onClick","message","info","margin","itemLayout","size","pagination","page","console","log","pageSize","dataSource","footer","renderItem","item","Item","key","actions","StarOutlined","LikeOutlined","MessageOutlined","extra","width","alt","src","testImage","Meta","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,kC,sGCA3CD,EAAOC,QAAU,IAA0B,qC,0NCMnCC,G,OAAoBC,IAApBD,QAAQE,EAAYD,IAAZC,QAsGDC,MArGf,WAII,IAJY,IAAD,EACWC,mBAAS,IADpB,mBACCC,GADD,aAEqBD,mBAAS,IAF9B,mBAEME,GAFN,WAGLC,EAAW,GACRC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,EAASE,KAAK,CACVC,KAAM,4BACNC,MAAM,eAAD,OAAOH,GACZI,OAAQ,mEACRC,YACI,wCACJC,QACI,gJAGZ,IAAMC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OACb,kBAAC,IAAD,KACKC,IAAMC,cAAcH,GACpBC,IAOHG,EAAqB,IAAIC,QAAQC,EAAQ,KAAsB,CACjEC,OAAQ,QAWZ,OARAC,qBAAU,WACNC,MAAML,GAAoBM,MAAK,SAACC,GAC5B,OAAOA,EAASV,UACjBS,MAAK,SAAAT,GACJX,EAAYsB,KAAKC,MAAMZ,SAE7B,IAGE,kBAAC,IAAD,KACI,kBAACjB,EAAD,CAAQ8B,UAAU,SAASC,MAAO,CAACC,OAAO,IAAKC,UAAU,WACjD,kBAAC,IAAD,CACIC,KAAK,SACLC,YAAa,CACT,KAAM,UACN,OAAQ,WAEZC,QAAS,EACTC,OAAO,WAEX,6BACI,0BAAMP,UAAU,cAAhB,sBACC,kBAAC,IAAD,CAAOQ,SAAW,SAAAC,GAAK,OAAIlC,EAAOkC,EAAMC,OAAOC,QAASC,YAAY,qDAAY,kBAAC,IAAD,CAAQC,QA9B5F,WACbC,IAAQC,KAAK,0CA6BoF,kBAI7F,kBAAC3C,EAAD,CAAS6B,MAAO,CAACC,OAAQ,OAAQc,OAAQ,KACrC,kBAAC,IAAD,CACIC,WAAW,WACXC,KAAK,QACLC,WAAY,CACRX,SAAU,SAAAY,GACNC,QAAQC,IAAIF,IAEhBG,SAAU,GAEdC,WAAY/C,EACZgD,OACI,6BACI,iEAGRC,WAAY,SAAAC,GAAI,OACZ,kBAAC,IAAKC,KAAN,CACIC,IAAKF,EAAK9C,MACViD,QAAS,CACL,kBAAC7C,EAAD,CAAUC,KAAM6C,IAAc5C,KAAK,MAAM0C,IAAI,yBAC7C,kBAAC5C,EAAD,CAAUC,KAAM8C,IAAc7C,KAAK,MAAM0C,IAAI,yBAC7C,kBAAC5C,EAAD,CAAUC,KAAM+C,IAAiB9C,KAAK,IAAI0C,IAAI,2BAElDK,MACI,yBACIC,MAAO,IACPC,IAAI,OACJC,IAAKC,OAIb,kBAAC,IAAKV,KAAKW,KAAX,CACIzD,OAAQ,kBAAC,IAAD,CAAQuD,IAAKV,EAAK7C,SAC1BD,MAAO,uBAAGD,KAAM+C,EAAK/C,MAAO+C,EAAK9C,OACjCE,YAAa4C,EAAK5C,cAErB4C,EAAK3C,eCvFdwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAM1C,c","file":"static/js/main.94620794.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/test.012d49ee.png\";","module.exports = __webpack_public_path__ + \"static/media/article.69a103df.bin\";","import React, {useEffect, useState} from 'react';\nimport {Avatar, Button, Input, Layout, List, message, Progress, Space} from \"antd\";\nimport { MessageOutlined, LikeOutlined, StarOutlined } from '@ant-design/icons';\nimport ReactMarkdown from 'react-markdown';\nimport testImage from \"./images/test.png\"\nimport \"./App.css\"\nconst { Header, Content } = Layout;\nfunction App() {\n    const [str, setStr] = useState(\"\");\n    const [articles, setArticles] = useState([]);\n    const listData = [];\n    for (let i = 0; i < 23; i++) {\n        listData.push({\n            href: 'https://lovevol.top/blog/',\n            title: `样例${i}`,\n            avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\n            description:\n                '这是一个样例.',\n            content:\n                '床前明月光，疑是地上霜。举头望明月，低头思故乡.',\n        });\n    }\n    const IconText = ({ icon, text }) => (\n        <Space>\n            {React.createElement(icon)}\n            {text}\n        </Space>\n    );\n    const hanldeOk = () => {\n        message.info(\"你输入的啥？\")\n    };\n\n    const getArtifactRequest = new Request(require('./article/article'), {\n        method: 'GET',\n    });\n\n    useEffect(()=>{\n        fetch(getArtifactRequest).then((response) => {\n            return response.text()\n        }).then(text=>{\n            setArticles(JSON.parse(text));\n        });\n    },[]);\n\n    return (\n        <Layout>\n            <Header className='header' style={{height:300, textAlign:\"center\"}}>\n                    <Progress\n                        type=\"circle\"\n                        strokeColor={{\n                            '0%': '#108ee9',\n                            '100%': '#87d068',\n                        }}\n                        percent={1}\n                        status=\"active\"\n                    />\n                    <div>\n                        <span className=\"headerText\">建设中</span>\n                         <Input onChange={(event => setStr(event.target.value))} placeholder=\"输入一串神秘代码\"/><Button onClick={hanldeOk}>确定</Button>\n                </div>\n\n            </Header>\n            <Content style={{height: '100%', margin: 30}}>\n                <List\n                    itemLayout=\"vertical\"\n                    size=\"large\"\n                    pagination={{\n                        onChange: page => {\n                            console.log(page);\n                        },\n                        pageSize: 5,\n                    }}\n                    dataSource={listData}\n                    footer={\n                        <div>\n                            <b>By 根号三百万</b>\n                        </div>\n                    }\n                    renderItem={item => (\n                        <List.Item\n                            key={item.title}\n                            actions={[\n                                <IconText icon={StarOutlined} text=\"156\" key=\"list-vertical-star-o\" />,\n                                <IconText icon={LikeOutlined} text=\"156\" key=\"list-vertical-like-o\" />,\n                                <IconText icon={MessageOutlined} text=\"2\" key=\"list-vertical-message\" />,\n                            ]}\n                            extra={\n                                <img\n                                    width={272}\n                                    alt=\"logo\"\n                                    src={testImage}\n                                />\n                            }\n                        >\n                            <List.Item.Meta\n                                avatar={<Avatar src={item.avatar} />}\n                                title={<a href={item.href}>{item.title}</a>}\n                                description={item.description}\n                            />\n                            {item.content}\n                        </List.Item>\n                    )}\n                />\n            </Content>\n        </Layout>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}